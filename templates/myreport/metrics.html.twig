{% extends "base.html.twig" %}

{% block title %}About{% endblock %}

{% block body %}
 <main class="main metrix">
        
    <header class="headerMe">
        <h2 class="h1">Metrics</h2>
    </header>
    <div class="metrix"><li><a href=”https://scrutinizer-ci.com/g/OlganeOlga/mvc-report/issues/master”</a>
    <img src="https://scrutinizer-ci.com/g/OlganeOlga/mvc-report/badges/build-score.png?b=master" alt="Scrutinizer Code Build">
</a></li>
</div>
    <h2 class="part" id="Intro">Introduction</h2>
<h3>Några ’C’ för bättre kodkvalitet</h3>
<p>
I Kmom06 ska vi lära oss använda några verktyg för att mäta kvalitet på applikationen (koden) och försöka förbättra den. Det finns flera olika mätvärden för kodens kvalitet. VI ska använda bara 6 eller 7 av de som börjar på ”C”, som kan hjälpa att få snyggare och bättre kod, “clean code”. De C-ar är:    </p>
<ul>
        <li>Codestyle</li>
        <li>Coverage</li>
        <li>Complexity</li>
        <li>Cohesion</li>
        <li>Coupling</li>
        <li>CRAP</li>
Och 
    <li>Code smell</li>
    </ul>
    <h3>Codstyle:</h3>
    <p>
     I php finns det inte explicita reglar som inte tillåter koden att fungera ifall kodstyle inte är standardiserad, men det är viktigt att skriva koden så mycket som möjligt nära allmänna standarder så att det blir lättare att läsa koden, analysera den så att andra programmerare kan använda koden i sina projekt. Kod som är skriven med bra style är lättare att förbättra.
    </p>
    <h3>Codcoverage</h3>
    <p>
För att minimera felkällor (buggar) i koden ska programvara testas så mycket som möjligt. Begrepp ”Codcoverage” visar vilken del av koden är testad genom enhetstesterna. Högre ”Coverage” säger att koden är bättre testad och därför är mera pålitligt.
  </p>
    <h3>Complexity</h3>
    <p>
        Kodkomplexitet visar hur många beslutspunkter finns i kodavsnitten. Det är sårbarhet grad. så det är önskvärd att försöka hålla ner kodkomplexitet. Tumregeln är att bibehålla kodkomplexitet under 10. Men ibland går det inte. </p>
    <h3>Cohesion</h3>
    <p>
        Cohesion är ett begrepp inom mjukvaruutveckling som avser graden av sammanhållning eller koppling mellan olika delar av en modul, klass eller system. Det mäter hur nära och relaterade olika delar av koden är relaterad till varandra.
    </p>
    <p> Hög cohesion visar att delarna av en klass är relaterad till varandra och fungerar rätt för att utföra en enda uppgift eller ansvar. Låg cohesion, visar att det finns delar av koden som är inte särskilt relaterade till varandra och kan ha olika ansvar eller uppgifter. </p>

    <h3>Coupling</h3>
    <p>Visar hur mycket end klas är beroende av den andra klasser. Det är instabilitetindex. Med låd coupling är en klass stabilt och ju högre är couplingsindex ju svarare är det att underhålla klassen vid ändringen av kod. Det visar också hur svår kan det vara att testa koden. Med högre koupling är det svarare att skriva bra tester.</p>
    
    <h3>CRAP</h3>
    <p>CRAP är förkortning for "Change Risk Analys and Predictor". Det inckluderar flera olika mätvärde i sig och visar hur svart är det att underhålla kodavsnitt (metod, class osv). För att förbättra kodkvalitet med högre CRAP ska man skaffa flera tester.
    </p>
    <h3>Code smell</h3>
<p>Den begrepp refererar till möjliga design eller användningsprovlem som ligger i koden. Det kan vara langa metoder, eller metoder med flera parametrar eller upprepade köravsnitt (duplicerad kod). Komplex logik och många beslutsmoment kan också höja den index. Testtakning räknas med. Index kan dras ner med flera enhetstester.</p>

    <h2 class="part" id="Phpmetrics">Phpmetrics</h2>
    
    <p>analysera dess rapport för din kod. Använd mätvärdena för att hitta flaskhalsar och 
        svaga punkter i din kod (minst 3 stycken). Du vill hitta kod som har förbättringspotential. 
        Visualisera med någon representativ bild från rapporten.
    </p>

    <h2 class="part" id=“Scrutinizer">Scrutinizer</h2>
    
    <p>
        analysera dess rapport för din kod. Gör på samma sätt som du gjorde med Phpmetrics.
    </p>
    <p>   
        Inkludera klickbara Scrutinizer badges i din rapport för build, coverage och quality.
    </p>
    <p>  
        Placera samma badges i din README.md.
    </p>

    <h2 class="part" id="Forbattringar">Förbättringar</h2>
    <p>
        där du väljer minst 3 förbättringar som du vill göra med din kod (gärna fler).
        Exempel på förbättringar kan vara:

            Fixa issues
            Öka kodtäckning
            Fokusera på kvalitetsindex i Scrutinizer
            Minska komplexiteten i class/metod
            Börja med att skriva om förbättringarna, vad du tänker göra, varför du väljer dem och hur du tror det kommer påverka mätvärdena för kvalitet.

            Implementera sedan förbättringarna.
            Analysera därefter rapporterna från phpmetrics och Scrutinizer och notera de nya mätvärdena.
            Gör det tydligt hur mätvärdena såg ut innan och efter dina förbättringar.
    </p>
    <h2 class="part" id="#Diskussion">Diskussion</h2>
    <p>
        Kan man aktivt jobba med kodkvalitet och “clean code” på detta sättet?
    </p>
    <p>
        Finns det fördelar och kanske nackdelar?
    </p>
    <p>
        Ser du andra möjligheter att jobba mot “clean code”?
    </p>
</main>
<aside class="aside">
    <h2 class="aside-right">Innehåll</h2>
    <ul>
        <li class="metrics"><a href="#Intro">Introduction</a></li>
        <li class="metrics"><a href="#Phpmetrics">Phpmetrics</a></li>
        <li class="metrics"><a href="#Scrutinizer">Scrutinizer</a></li>
        <li class="metrics"><a href="#Forbattringar">Förbättringar</a></li>
        <li class="metrics"><a href="#Diskussion">Diskussion</a></li>
    </ul>
</aside>
    
{% endblock %}