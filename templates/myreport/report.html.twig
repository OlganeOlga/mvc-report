{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<main class="mainreport">
    <header class="headerMe">
        <h2 class="h1">Reportsidan för kurs MVC</h2>
        
    </header>
    <div class="link">
        <ul>
            <li><a href="#kmom01">kmom01</a></li>
            <li><a href="#kmom02">kmom02</a></li>
            <li><a href="#kmom03">kmom03</a></li>
            <li><a href="#kmom04">kmom04</a></li>
            <li><a href="#kmom05">kmom05</a></li>
            <li><a href="#kmom06">kmom06</a></li>
            <li><a href="#kmom07-10">kmom07 - Kmom10</a></li>
        </ul>
    </div>
    <div class="report">
        <h2 class="kmom" id="kmom01">kmom01</h2>
        <p>
            Det är första moment i kurs MVC. Kursen handlar om objektorienterande programmering in PHP. Det är redan fjärde programmerings språk där jag lär objektorienterande sätt att programmera. Jag gjorde det med Java, Python, JavaScript. Så objektorienterande programmering är inte något nytt för mig. 
        </p>
        <p>
            Objekt är en instans av en klass. Varje klass har egenskaper (variabler och kanske konstanter) och metoder (funktioner). Klass oftast har en konstruktör, som definierar egenskaper av skapande objekt. Sedan objekt kan funktionera med hjälp av metoder.
        </p>
        <p>
            Båda egenskaper och metoder kan vara publika. Publik metod eller variabel kan uppropas utifrån klassen. Variabler och egenskaper kan vara privata. I så fall de kan inte uppropas utanför klassen och ”icke synbara”. Det finns möjlighet att använda ”protected” visibilitet. Dessa metoder och egenskaper kan användas av både klassen och deras subklasser.
        </p>
        <p>
            Artikeln ”PHP The Right Way” innehåller många användbara tips och mycket informativt. Den hjälpte mig att förstå vad gör jag under övningen. Och jag läste lite mera om klasser i PHP och kodstandarter.
        </p>
        <p>
            I kmom01 börjar vi att bygga projekt med hjälp av källkodsramverk ” Symfony”. Symfony tillåter att dela koden i olika komponenter. Det hjälper med att dela koden i mindre moduler och att redigera den.
        </p>
        
        <h2 class="kmom" id="kmom02">kmom02</h2>
        <p>
                I andra kursmoment fortsätter ve med att skapa objekt i PHP. Vi arbetar med child-klasser som arver från föräldrar-klass både konstruktör, properties och metoder. För att ange att klass arver från en andra klass används ”extends”-ord. Vid komposition en klass arver inte från den andra men använder den andra klass, som t.ex. klass Hand använder class Die.
        </p>
        <p>
                Det finns möjlighet att skappa ett sätt metoders namn som använder olika klasser. Dessa klasser behöver inte ärva från varandra i så fall men ändå använda samma metoder. Interface tillåter klaser definiera metoder själv och oberoende från varandra.
        </p>
        <p>
                Trait är ett annat sätt att skriva mindre kod. Trait can definiera metoder som olika klasser använder.
        </p>
        <p>
                För att lösa uppgiften skaffade jag tre klasser: Card, CardGraphics och Desk. Alla de ligger i src/Card, Jag skaffade controllers i CardPlayController.php. Templates ligger i templates/cardplay och använder base_card.html.twig. Det finns några routes för att debugga kortspel, och de använder base_card_debug.html.twig. Tuvärr har jag ingen tir att skaffa fina bilder för kort.
        </p>
        <p>
                Json-routes finns i MyJsonController.php.
        </p>
        <p>
                Det är intressant att arbeta objektorienterad. Eftersom det var redan objekten i andra kurser, så börjar jag förstå de på djupare sätt. Tuvär är Simfony ett tillräckligt tungt ramverk för min gamla dator. Den blev den otroligt seg. Det hindrar arbetet. 
        </p>
        <p>Jag började använda JavaSkript inuti html som känns ganska bra.  </p>
    

        <h2 class="kmom" id="kmom03">kmom03</h2>
         </p>
        <p>
            I Kmom03 fortsätt vi arbeta med Symfony ramverk och objektorienterande programmering i PHP. V
            i skulle skaffa ett kortspel. Första steg var planering med hjälp av flödesdiagram och pseudokod. Jag välde att arbeta med kortspel 21.
            Detta steg blev en bra hjälp för mig, för att det hjälpte mig att skaffa en inre förståelse för hur jag ska går tillväg. Jag kan erkänna att jag inte har tittat på pseudokod eller på flödesschema efteråt, under arbetet med koden.
         </p>
        <p>    
            Jag skaffade följande klasser: Card, CardGraphics, Desk, Hand, Player, Bank och Game21.
        </p>
        <ul>
            <li> 
                Class Card presenterar en kort med: face, kostym och värde. Ess har värde 1.
            </li>
            <li>
                CardGraphics kan visa grafiska kort.
            </li>
            <li>
                Class Hand innehåller noll till flera kort, hand kan bifoga flera kort till sig själv, visa sina kort och kalkylera sitt värde.
            </li>
            <li>
                Class Desk inhaler 52 to noll kort, kan visa alla sina kort och shuffle kort.
            </li>
            <li>
                Class Player har egenskaper: hand, bet och profit. Player kan få ett kort I taget, can satsa på spelet vintvinna eller förora.
            </li>
            <li>
                Class Bank är barnklass för Player. Bank har extra funktionalitet: dela ut kort från Desk (ett i taget), och ta kort från Desk (en i taget).
            </li>
        </ul>
        <p>
            Alla dessa objektera kan förvandlas till arreyer och skaffas tilbacka från arrayer.
        </p>
        <p>
            Sedan jag började skaffa routes, men för att få mindre kod i routes jag skaffade även klass Game21, som sköter alla steg i spelet.
        </p>
        <p>
            Efter åt detta kmom känner jag mig ganska säkert med Symfony.
            </p>


        <h2 class="kmom" id="kmom04">kmom04</h2>
        <p>
            Under kmom04 lärde vi oss att dokumentera egen kod och skapa dokumentation med phpdoc. Vi började också med kodtestning med phpunit.
        </p>
        <p>
            Att skriva tester till egen kod hjälpte mig med att förstå bättre på vilket sätt skulle jag kunna skriva bättre kod. Bland annat förstod jag varför är det bättre när klass använder en annan klass än när den äger annan klass. Det är betydligt lättare att testa klass oberoende från andra klassar när klassen inte äger andra klasser men bara använder de. Just nu lyckades jag att testa så 82% av mina klasser i Game21. Det var betydligt svårare att testa kod i klassen Game21 pga den använder många andraklasser och funktioner gör flera olika grejer. Det är något som jag måste komma ihåg i nästa gången: även i klassen som sköter hela systemet är det bättre att skriva enkla funktioner. 
        </p>
        <p>
            För att kunna testa klass Game21 bättre välde jag att ändra klassens konstruktor. Nu Game21 får alla andra klasser som Desk, Player och Bank i skickade med konstruktor och inte instantierar inom konstruktor som det var först.
        </p>
        <p>
            Att dokumentera egen kod är också en bra grej. Den hjälper att skaffa en korrekt scheman av egen kod och att bättre komma ihåg vilken funktionalitet redan finns. 
        </p>
        <p>
        §Jag förstå att en viktig del av utvecklingsprocessen och att det lönar sig att investera tid och resurser i den.
        </p>

        <h2 class="kmom" id="kmom05">kmom05</h2>
        <p>
            I kmom 05 provar vi att arbeta med databaser genom Objekt Relational Mapping (ORM). Det sättet tillåter att arbeta med databaser utan att använda SQL. I sådant fall betraktas en rad i databastabell som ett objekt. Tabell betraktas som en klass. Det var ganska lätt att arbeta med tabell ”produkt”. Det hjälpte mycket när vi skaffade två funktioner i Productrepository där vi sökte produkt efter en samma egenskap, men den ena funktion använde Doctrine’s QuerisBuilder för att skaffa SQL och den andra använder direkt SQL.
        </p>
        <p>
            I uppgiften skulle vi bygga en applikation för bibliotek. Jag skaffade en tabell ”book”, som Class Book. Applikation har en laddnings sidan som visar allt vad användare kan göra. I fall något funktion fungerar inte (book kan inte bifogas eller användare söker en book med id som finns inte), så visas en meddelande som förklarar vad gick fel. 
        </p>
        <p>
            I detta kmom lärde vi oss ett nytt sätt att arbeta med databaser som tillåter Skaffa end tabell (Create), läsa tabell (Read), uppdatera rader i tabell (Uppdate) och ta bort rader i tabell (Delete). Jag tycker att ORM i CRUD tillåter lätt skaffa en applikation för att utföra enkla uppgifter med en databas. Med direkt SQL tillåter göra mera uppgifter med en databas. Den tillåter att skaffa mera komplicerade funktioner (lagrade procedurer) som arbetar med flera tabeller.
        </p>


        <h2 class="kmom" id="kmom06">kmom06</h2>
         <p>Kmom06 handlar om testverktyg. Ser också: <a href="{{ path('metrics') }}">Metrix</a></p>
        <p>
            I Kmom06 arbetar vi med phpmetrics och Scrutiniser: verktyg för att se hur säkert koden är. Den första kan man använda på lokal repo och den andra kan anävndas online. Jag tycker att den ger alldeles för många mätningar. Jag gick först vilse bland de alla. Å andra sätt hjälper båda verktyg med att förstå bättre hyr olika delar av projekt påverkar varandra och var kan svaga delar, delar som kan ger fel, finnas.
        </p>
        <p>
            Skrutinizer ställer för det största problem för mig. Det svaraset var att jag koplade delade repo i flera grnar och har svårt att merga de, när de koplade till scrutinizer. 
            Efter första bugget fick jag cottackning på 21% och kodkvalitet på 9.98
        </p>
        <p>
            Till slutt lyckades jag twsta lite drygt 70% av koden. Jag var tvungen att ta bort vissa tetes som testade databaskopplade delar av koden.
            Det blev nästan gröna bages. Dock undrar jag om bages visa inte tillräckligt många nyanser på kod kvalitet. Det verkar att om jag skaffar flera asserts på samma kodregel, så höjdes min kodkvalitet, fat det var ibbland asserts som assertar samma sak. 
        </p>

        <h2 class="kmom" id="kmom07-10">kmom07 - kmom10</h2>
        <p>
            För mitt projekt har jag skapad en route ”/proj” som render till projektens hemsida. Alla projektens sidor ligger i ”templates/project” folder. Projektens templates har egen base-template base.project.html.twig. Projektens base-template använder inte egen style-fil, men alla element har class project. 
        </p>
        <p>
            På detta sätt kunde jag skapa annat style för projekten. Alla stylar ligger i assets/style/proj.css. I nävbara finns bara länkar till projektens hemsida och ’about-sidan’. Spelet börjar med knäppen ’SPELA’.
        </p>
        <p>
            Det finns också en router ”/proj/about” som render till projektens ’about-sidan’. Där finns lite information om projektens upplag. För projektet väjde jag att implementera kortspem ’Black Jack’. Spelet kan spelas med 1-3 deltagare som spelar mot bank. Jag använde regels variant där alla spelare får två kort och bank en. Bank tar fera kort efter att alla spelare är färdiga med att få sina kort. Bank tar kort tills den får 17 eller flera poäng. Om bank får as och 6-an det räknas för 17 poäng. En spelare kan dela hand ifall den får kort med samma face.
        </p>
        <p>
            Projektet sparad i samma gitrepo som andra kursens kmom. Jag har updaterad README.md så att första delen berätter om projektet. README har beskrivning av projektens klasser och upplag. Jag har bifogat instruktion för kloning av projekt. Scrutinazer badges är bifogat.
        </p>
        <p> 
            Unittester tackar 100% av alla projektens klasser. Jag updaterar phpdocs och genererade phpmetrics som visas under ’/metrics/index.htmt’ och ’/coverage/index.html’
        </p>
        <p>
            Det var intressant att arbeta med projektet. Jag har börjad med att skaffa landningssidan och stylar. Sedan har jag skaffat about-sidan. Efter det började jag med att skaffa spelets flödesshkäman på papper. Min flödesskäman blev ganska komplicerad och jag fick inte framför mig hur kan jag göra den enklare. Så började jag med att skaffa klasser. 
        </p>
        <p>
            Det blev först 6 klasser: Card, CardGraphics extends Card, Hand (använder CardGraphics), Desk (använder CardGraphics), Player (använder Hand), Bank extends Player (använder Hand), Game som implicerar spelets logik.

        </p>
        <p>
            Senare skaffade jag klass Person och omvandla Player och Bank till barnklass av Person. På sådant sätt kan både Player och Bank ha vissa egna funktioner.
        </p>
        <p>
            Klass Game blev väldigt stor och komplicerad. Jag skaffade två extra klasser GameInterface barn klass för Game och WinstCounter barnklass för   GameInterface. Det var gjort för att minska cyklomatig komplexitet av Game klassen. Jag lukades att minska den något. WinstCounter har dock fortfarande för många beslutsmomenter och på detta sätt för stor cyklomatig komplexitet.
        </p>
        <p>
            Det tog för mig ganska lång tid att få spelet fungera rätt. Den svåraste vara att få rätt med vinstberäkning. Jag tror nu att det skulle vara klok om jag återvänd till flödesshkäman på det punkten och försök förenkla den. I alla fall fick jag det på rätt sätt. Men då verkade det att Game klass är otroligt komplex. Jag börjar med att omorganisera klasser och det kostade mig 3 extra dagar.
        </p>
        <p>
            Det var tur att jag skrev tester samtidigt med att jag skaffade nu klass-funktionalitet. Det hjälpte både med att vara säkert i funktions fungerande och jag var den inte skriva mycket att testa i slutet.
        </p>
        <p>
            Det var lagom svårt projekt tycker jag. Jag skulle bara ville ha mera tid att jobba med den. 
        </p>
        <p>
            Gällande kursen, jag tycker att den är bra och jag fick lära mig mycket nytt. Det enda som jag vill är att har mera tid för alla uppgifter.
        </p>
    </div>
</main>

    
{% endblock %}