{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<main class="mainreport">
    <header class="headerMe">
        <h2 class="h1">Reportsidan för kurs MVC</h2>
        
    </header>
    <div class="link">
        <ul>
            <li><a href="#kmom01">kmom01</a></li>
            <li><a href="#kmom02">kmom02</a></li>
            <li><a href="#kmom03">kmom03</a></li>
            <li><a href="#kmom04">kmom04</a></li>
            <li><a href="#kmom05">kmom05</a></li>
            <li><a href="#kmom06">kmom06</a></li>
            <li><a href="#kmom07-10">kmom07 - Kmom10</a></li>
        </ul>
    </div>
    <div class="report">
        <h2 class="kmom" id="kmom01">kmom01</h2>
        <p>
            Det är första moment i kurs MVC. Kursen handlar om objektorienterande programmering in PHP. Det är redan fjärde programmerings språk där jag lär objektorienterande sätt att programmera. Jag gjorde det med Java, Python, JavaScript. Så objektorienterande programmering är inte något nytt för mig. 
        </p>
        <p>
            Objekt är en instans av en klass. Varje klass har egenskaper (variabler och kanske konstanter) och metoder (funktioner). Klass oftast har en konstruktör, som definierar egenskaper av skapande objekt. Sedan objekt kan funktionera med hjälp av metoder.
        </p>
        <p>
            Båda egenskaper och metoder kan vara publika. Publik metod eller variabel kan uppropas utifrån klassen. Variabler och egenskaper kan vara privata. I så fall de kan inte uppropas utanför klassen och ”icke synbara”. Det finns möjlighet att använda ”protected” visibilitet. Dessa metoder och egenskaper kan användas av både klassen och deras subklasser.
        </p>
        <p>
            Artikeln ”PHP The Right Way” innehåller många användbara tips och mycket informativt. Den hjälpte mig att förstå vad gör jag under övningen. Och jag läste lite mera om klasser i PHP och kodstandarter.
        </p>
        <p>
            I kmom01 börjar vi att bygga projekt med hjälp av källkodsramverk ” Symfony”. Symfony tillåter att dela koden i olika komponenter. Det hjälper med att dela koden i mindre moduler och att redigera den.
        </p>
        
        <h2 class="kmom" id="kmom02">kmom02</h2>
        <p>
                I andra kursmoment fortsätter ve med att skapa objekt i PHP. Vi arbetar med child-klasser som arver från föräldrar-klass både konstruktör, properties och metoder. För att ange att klass arver från en andra klass används ”extends”-ord. Vid komposition en klass arver inte från den andra men använder den andra klass, som t.ex. klass Hand använder class Die.
        </p>
        <p>
                Det finns möjlighet att skappa ett sätt metoders namn som använder olika klasser. Dessa klasser behöver inte ärva från varandra i så fall men ändå använda samma metoder. Interface tillåter klaser definiera metoder själv och oberoende från varandra.
        </p>
        <p>
                Trait är ett annat sätt att skriva mindre kod. Trait can definiera metoder som olika klasser använder.
        </p>
        <p>
                För att lösa uppgiften skaffade jag tre klasser: Card, CardGraphics och Desk. Alla de ligger i src/Card, Jag skaffade controllers i CardPlayController.php. Templates ligger i templates/cardplay och använder base_card.html.twig. Det finns några routes för att debugga kortspel, och de använder base_card_debug.html.twig. Tuvärr har jag ingen tir att skaffa fina bilder för kort.
        </p>
        <p>
                Json-routes finns i MyJsonController.php.
        </p>
        <p>
                Det är intressant att arbeta objektorienterad. Eftersom det var redan objekten i andra kurser, så börjar jag förstå de på djupare sätt. Tuvär är Simfony ett tillräckligt tungt ramverk för min gamla dator. Den blev den otroligt seg. Det hindrar arbetet. 
        </p>
        <p>Jag började använda JavaSkript inuti html som känns ganska bra.  </p>
    

        <h2 class="kmom" id="kmom03">kmom03</h2>
         </p>
        <p>
            I Kmom03 fortsätt vi arbeta med Symfony ramverk och objektorienterande programmering i PHP. V
            i skulle skaffa ett kortspel. Första steg var planering med hjälp av flödesdiagram och pseudokod. Jag välde att arbeta med kortspel 21.
            Detta steg blev en bra hjälp för mig, för att det hjälpte mig att skaffa en inre förståelse för hur jag ska går tillväg. Jag kan erkänna att jag inte har tittat på pseudokod eller på flödesschema efteråt, under arbetet med koden.
         </p>
        <p>    
            Jag skaffade följande klasser: Card, CardGraphics, Desk, Hand, Player, Bank och Game21.
        </p>
        <ul>
            <li> 
                Class Card presenterar en kort med: face, kostym och värde. Ess har värde 1.
            </li>
            <li>
                CardGraphics kan visa grafiska kort.
            </li>
            <li>
                Class Hand innehåller noll till flera kort, hand kan bifoga flera kort till sig själv, visa sina kort och kalkylera sitt värde.
            </li>
            <li>
                Class Desk inhaler 52 to noll kort, kan visa alla sina kort och shuffle kort.
            </li>
            <li>
                Class Player har egenskaper: hand, bet och profit. Player kan få ett kort I taget, can satsa på spelet vintvinna eller förora.
            </li>
            <li>
                Class Bank är barnklass för Player. Bank har extra funktionalitet: dela ut kort från Desk (ett i taget), och ta kort från Desk (en i taget).
            </li>
        </ul>
        <p>
            Alla dessa objektera kan förvandlas till arreyer och skaffas tilbacka från arrayer.
        </p>
        <p>
            Sedan jag började skaffa routes, men för att få mindre kod i routes jag skaffade även klass Game21, som sköter alla steg i spelet.
        </p>
        <p>
            Efter åt detta kmom känner jag mig ganska säkert med Symfony.
            </p>


        <h2 class="kmom" id="kmom04">kmom04</h2>
        <p>
            Under kmom04 lärde vi oss att dokumentera egen kod och skapa dokumentation med phpdoc. Vi började också med kodtestning med phpunit.
        </p>
        <p>
            Att skriva tester till egen kod hjälpte mig med att förstå bättre på vilket sätt skulle jag kunna skriva bättre kod. Bland annat förstod jag varför är det bättre när klass använder en annan klass än när den äger annan klass. Det är betydligt lättare att testa klass oberoende från andra klassar när klassen inte äger andra klasser men bara använder de. Just nu lyckades jag att testa så 82% av mina klasser i Game21. Det var betydligt svårare att testa kod i klassen Game21 pga den använder många andraklasser och funktioner gör flera olika grejer. Det är något som jag måste komma ihåg i nästa gången: även i klassen som sköter hela systemet är det bättre att skriva enkla funktioner. 
        </p>
        <p>
            För att kunna testa klass Game21 bättre välde jag att ändra klassens konstruktor. Nu Game21 får alla andra klasser som Desk, Player och Bank i skickade med konstruktor och inte instantierar inom konstruktor som det var först.
        </p>
        <p>
            Att dokumentera egen kod är också en bra grej. Den hjälper att skaffa en korrekt scheman av egen kod och att bättre komma ihåg vilken funktionalitet redan finns. 
        </p>
        <p>
        §Jag förstå att en viktig del av utvecklingsprocessen och att det lönar sig att investera tid och resurser i den.
        </p>

        <h2 class="kmom" id="kmom05">kmom05</h2>
        <p>
            I kmom 05 provar vi att arbeta med databaser genom Objekt Relational Mapping (ORM). Det sättet tillåter att arbeta med databaser utan att använda SQL. I sådant fall betraktas en rad i databastabell som ett objekt. Tabell betraktas som en klass. Det var ganska lätt att arbeta med tabell ”produkt”. Det hjälpte mycket när vi skaffade två funktioner i Productrepository där vi sökte produkt efter en samma egenskap, men den ena funktion använde Doctrine’s QuerisBuilder för att skaffa SQL och den andra använder direkt SQL.
        </p>
        <p>
            I uppgiften skulle vi bygga en applikation för bibliotek. Jag skaffade en tabell ”book”, som Class Book. Applikation har en laddnings sidan som visar allt vad användare kan göra. I fall något funktion fungerar inte (book kan inte bifogas eller användare söker en book med id som finns inte), så visas en meddelande som förklarar vad gick fel. 
        </p>
        <p>
            I detta kmom lärde vi oss ett nytt sätt att arbeta med databaser som tillåter Skaffa end tabell (Create), läsa tabell (Read), uppdatera rader i tabell (Uppdate) och ta bort rader i tabell (Delete). Jag tycker att ORM i CRUD tillåter lätt skaffa en applikation för att utföra enkla uppgifter med en databas. Med direkt SQL tillåter göra mera uppgifter med en databas. Den tillåter att skaffa mera komplicerade funktioner (lagrade procedurer) som arbetar med flera tabeller.
        </p>


        <h2 class="kmom" id="kmom06">kmom06</h2>
        <p>Kmom06 handlar om testverktyg. Se vidare: <a href="{{ path('metrics') }}">Metrix</a></p>
        <h2 class="kmom" id="kmom07-10">kmom07 - kmom10</h2>
    </div>
</main>

    
{% endblock %}